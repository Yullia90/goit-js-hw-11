// <!-- Завдання -->

// 4.У відповіді буде масив зображень, що задовольнили критерії параметрів запиту. Кожне зображення описується об'єктом, з якого тобі цікаві тільки наступні властивості:
// webformatURL - посилання на маленьке зображення для списку карток.
// largeImageURL - посилання на велике зображення.
// tags - рядок з описом зображення. Підійде для атрибуту alt.
// likes - кількість лайків.
// views - кількість переглядів.
// comments - кількість коментарів.
//     downloads - кількість завантажень.
// 5.Якщо бекенд повертає порожній масив, значить нічого підходящого не було знайдено.
//  У такому разі показуй повідомлення з текстом "Sorry, there are no images matching
//   your search query.Please try again.".Для повідомлень використовуй бібліотеку notiflix.
// 6.Елемент div.gallery спочатку міститься в HTML документі, і в нього необхідно рендерити розмітку карток зображень.
//Під час пошуку за новим ключовим словом необхідно повністю очищати вміст галереї, щоб не змішувати результати.

// 8.Pixabay API підтримує пагінацію і надає параметри page і per_page. Зроби так, щоб в кожній відповіді приходило 40 об'єктів (за замовчуванням 20).

// Початкове значення параметра page повинно бути 1.
// З кожним наступним запитом, його необхідно збільшити на 1.
// У разі пошуку за новим ключовим словом, значення page потрібно повернути до початкового, оскільки буде пагінація по новій колекції зображень.
// 9.HTML документ вже містить розмітку кнопки, по кліку на яку, необхідно виконувати запит за наступною групою зображень і додавати розмітку до вже існуючих елементів галереї.
// 10.В початковому стані кнопка повинна бути прихована.
// Після першого запиту кнопка з'являється в інтерфейсі під галереєю.
// При повторному сабміті форми кнопка спочатку ховається, а після запиту знову відображається.
// 11.У відповіді бекенд повертає властивість totalHits - загальна кількість зображень, які відповідають критерію пошуку(для безкоштовного акаунту).Якщо користувач дійшов до кінця колекції, ховай кнопку і виводь повідомлення з текстом "We're sorry, but you've reached the end of search results.".
// 12.Після першого запиту з кожним новим пошуком отримувати повідомлення, в якому буде написано, скільки всього знайшли зображень(властивість totalHits).Текст повідомлення - "Hooray! We found totalHits images."
// 13.Додати відображення великої версії зображення з бібліотекою SimpleLightbox для повноцінної галереї.У розмітці необхідно буде обгорнути кожну картку зображення у посилання, як зазначено в документації.
// Бібліотека містить метод refresh(), який обов'язково потрібно викликати щоразу після додавання нової групи карток зображень.
// 14.Для того щоб підключити CSS код бібліотеки в проект, необхідно додати ще один імпорт, крім того, що описаний в документації.

// 15.Зробити плавне прокручування сторінки після запиту і відтворення кожної наступної групи зображень. Ось тобі код-підказка, але розберися у ньому самостійно.

// const { height: cardHeight } = document
//   .querySelector(".gallery")
//   .firstElementChild.getBoundingClientRect();

// window.scrollBy({
//   top: cardHeight * 2,
//   behavior: "smooth",
// });
// 16.Замість кнопки «Load more», можна зробити нескінченне завантаження зображень під час прокручування сторінки. Ми надаємо тобі повну свободу дій в реалізації, можеш використовувати будь-які бібліотеки.
//========================================================================================================
import { fetchFoto } from './fetchFoto';
console.log(fetchFoto);
//=======Бібліотека SimpleLightbox========================
import SimpleLightbox from 'simplelightbox';
// Додатковий імпорт стилів
import 'simplelightbox/dist/simple-lightbox.min.css';
//=======Бібліотека Notify========================
import { Notify } from 'notiflix/build/notiflix-notify-aio';
//Користувач буде вводити рядок для пошуку у текстове поле, а по сабміту форми необхідно виконувати
// HTTP - запит.
//=======звертаємось до змінних=================
const formEl = document.querySelector('#search-form');
const galleryEl = document.querySelector('.gallery');
const btmLoadmore = document.querySelector('.load-more');
console.log(formEl, galleryEl, btmLoadmore);
//=========викликаємо слухачів=====================
formEl.addEventListener('submit', onSeach);
// formEl.addEventListener('click');
// formEl.addEventListener('click');
//==============================
function onSeach() {}
//=====Шаблон розмітки картки одного зображення для галереї========
/* <div class="photo-card">
  <img src="" alt="" loading="lazy" />
  <div class="info">
    <p class="info-item">
      <b>Likes</b>
    </p>
    <p class="info-item">
      <b>Views</b>
    </p>
    <p class="info-item">
      <b>Comments</b>
    </p>
    <p class="info-item">
      <b>Downloads</b>
    </p>
  </div>
</div>; */
